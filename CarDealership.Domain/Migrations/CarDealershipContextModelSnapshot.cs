// <auto-generated />
using CarDealership.Domain.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CarDealership.Domain.Migrations
{
    [DbContext(typeof(CarDealershipContext))]
    partial class CarDealershipContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarDealership.Domain.DomainModels.Car", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Extras");

                    b.Property<Guid>("ModelId");

                    b.Property<decimal>("RecommendPrice");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("CarDealership.Domain.DomainModels.CarPurchase", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("CarId");

                    b.Property<Guid>("CustomerId");

                    b.Property<DateTime>("OrderDate");

                    b.Property<decimal>("PricePaid");

                    b.Property<Guid>("SalesPersonId");

                    b.HasKey("Id");

                    b.HasIndex("CarId")
                        .IsUnique();

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesPersonId");

                    b.ToTable("CarPurchase");
                });

            modelBuilder.Entity("CarDealership.Domain.DomainModels.Customer", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<int>("Age");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Surname")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("CarDealership.Domain.DomainModels.JobTitle", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("JobTitle");
                });

            modelBuilder.Entity("CarDealership.Domain.DomainModels.Make", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Make");
                });

            modelBuilder.Entity("CarDealership.Domain.DomainModels.Model", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid>("MakeId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("MakeId");

                    b.ToTable("Model");
                });

            modelBuilder.Entity("CarDealership.Domain.DomainModels.SalesPerson", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<Guid>("JobTitleId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<decimal>("Salary");

                    b.HasKey("Id");

                    b.HasIndex("JobTitleId");

                    b.ToTable("SalesPerson");
                });

            modelBuilder.Entity("CarDealership.Domain.DomainModels.Car", b =>
                {
                    b.HasOne("CarDealership.Domain.DomainModels.Model", "MakeAndModel")
                        .WithMany("Cars")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CarDealership.Domain.DomainModels.CarPurchase", b =>
                {
                    b.HasOne("CarDealership.Domain.DomainModels.Car", "Car")
                        .WithOne("CarPurchase")
                        .HasForeignKey("CarDealership.Domain.DomainModels.CarPurchase", "CarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CarDealership.Domain.DomainModels.Customer", "Customer")
                        .WithMany("CarPurchases")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CarDealership.Domain.DomainModels.SalesPerson", "SalesPerson")
                        .WithMany("Sales")
                        .HasForeignKey("SalesPersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CarDealership.Domain.DomainModels.Model", b =>
                {
                    b.HasOne("CarDealership.Domain.DomainModels.Make", "Make")
                        .WithMany("Models")
                        .HasForeignKey("MakeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CarDealership.Domain.DomainModels.SalesPerson", b =>
                {
                    b.HasOne("CarDealership.Domain.DomainModels.JobTitle", "JobTitle")
                        .WithMany("SalesPersons")
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
